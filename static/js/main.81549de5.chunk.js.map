{"version":3,"sources":["../../src/Components/StatBox.tsx","../../src/Components/StatRow.tsx","../../src/Components/Skill.tsx","../../src/Components/StatBox2.tsx","../../src/Components/DeathSave.tsx","../../src/Components/AttackTable.tsx","../../src/Components/Currency.tsx","../../src/DnDCharacterStatsSheet.tsx","../../src/Components/Image.tsx","../../src/DnDCharacterProfileSheet.tsx","../../src/Components/SpellTable.tsx","../../src/DnDCharacterSpellSheet.tsx","App.tsx","index.tsx"],"names":["StatBox","props","classes","modifier","isNaN","Number","modifierNum","Math","className","React","type","value","onChange","e","StatRow","Skill","onClick","StatBox2","DeathSave","style","display","AttackTable","getValue","width","key","index","v","updateValue","Currency","initialState","character","constructor","oldCharacter","this","newCharacter","Object","state","textAlign","textTransform","fontSize","label","name","str","dex","con","int","wis","cha","inspiration","proficiencyBonus","strSave","checked","strSaveChecked","dexSave","dexSaveChecked","conSave","conSaveChecked","intSave","intSaveChecked","wisSave","wisSaveChecked","chaSave","chaSaveChecked","marginTop","hint","skillAcrobatics","skillAcrobaticsChecked","skillAnimalHandling","skillAnimalHandlingChecked","skillArcana","skillArcanaChecked","skillAthletics","skillAthleticsChecked","skillDeception","skillDeceptionChecked","skillHistory","skillHistoryChecked","skillInsight","skillInsightChecked","skillIntimidation","skillIntimidationChecked","skillInvestigation","skillInvestigationChecked","skillMedicine","skillMedicineChecked","skillNature","skillNatureChecked","skillPerception","skillPerceptionChecked","skillPerformance","skillPerformanceChecked","skillPersuasion","skillPersuasionChecked","skillReligion","skillReligionChecked","skillSlightOfHand","skillSlightOfHandChecked","skillStealth","skillStealthChecked","skillSurvival","skillSurvivalChecked","passivePerception","rows","labelTop","ac","init","speed","borderRadius","marginBottom","paddingBottom","deathsaveSuccesses","deathsaveFailures","attacks","cp","sp","ep","gp","pp","paddingTop","Image","elementId","backgroundImage","document","id","accept","console","event","window","fr","importImage","appearance","factionImg","totalNonConsumableMagicItems","SpellTable","slotCount","slots","i1","renderSlotsRemaining","position","left","preparedSpellsTotal","spellSaveDC","spellAttackBonus","level","cantrips","showLabels","slotsName","slotsUsedName","lvl1Spells","slotsValue","lvl1SpellSlotsTotal","slotsUsedValue","lvl1SpellSlotsUsed","lvl2Spells","lvl2SpellSlotsTotal","lvl2SpellSlotsUsed","lvl3Spells","lvl3SpellSlotsTotal","lvl3SpellSlotsUsed","lvl4Spells","lvl4SpellSlotsTotal","lvl4SpellSlotsUsed","lvl5Spells","lvl5SpellSlotsTotal","lvl5SpellSlotsUsed","lvl6Spells","lvl6SpellSlotsTotal","lvl6SpellSlotsUsed","lvl7Spells","lvl7SpellSlotsTotal","lvl7SpellSlotsUsed","lvl8Spells","lvl8SpellSlotsTotal","lvl8SpellSlotsUsed","lvl9Spells","lvl9SpellSlotsTotal","lvl9SpellSlotsUsed","ScrollToTop","pathname","useLocation","useEffect","scrollTo","withRouter","useState","lsData","localStorage","getItem","JSON","parse","loadDefaultCharacter","setCharacter","navTop","setNavTop","pageYOffset","prevScrollpos","setPrevScrollpos","setLoading","search","characterToLoad","qs","ignoreQueryPrefix","axios","get","then","response","Array","isArray","data","Error","log","updateCharacter","catch","error","statsSheet","onCharacterChanged","profileSheet","spellSheet","setItem","stringify","importCharacter","target","files","length","FileReader","onload","result","json","alert","loadCharacter","readAsText","onscroll","currentScrollPos","onScroll","backgroundColor","top","data-toggle","data-target","aria-controls","aria-expanded","aria-label","location","to","a","createElement","file","Blob","href","URL","createObjectURL","download","replace","toLowerCase","click","exportCharacter","getElementById","print","exact","path","defaultRedirect","innerWidth","getDefaultRedirect","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.81549de5.chunk.js","sourcesContent":["import React from 'react'\n\nfunction StatBox(props: {\n  classes?: string\n  value: string | number | readonly string[] | undefined\n  label: React.ReactNode\n  onChange: (arg0: any, arg1: string) => void\n  name: any\n}) {\n  let classes = 'd-and-d-statbox'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  let modifier: string = ''\n  if (props.value && !isNaN(Number(props.value))) {\n    const modifierNum = Math.floor((Number(props.value) - 10) / 2)\n    if (modifierNum > 0) {\n      modifier = '+' + modifierNum\n    } else {\n      modifier = modifierNum.toString()\n    }\n  }\n\n  return (\n    <div>\n      <div className={classes}>\n        <label>{props.label}</label>\n        <div className='d-and-d-statbox-modifier'>{modifier}</div>\n      </div>\n      <div className='d-and-d-statbox-value'>\n        <input\n          type='text'\n          value={props.value ? props.value : ''}\n          onChange={(e) => props.onChange(props.name, e.target.value)}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default StatBox\n","import React from 'react'\n\nfunction StatRow(props: {\n  classes?: string\n  value: string | number | readonly string[] | undefined\n  onChange: (arg0: any, arg1: string) => void\n  name: any\n  label: React.ReactNode\n}) {\n  let classes = 'd-and-d-statrow'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <div className={classes}>\n      <div className='d-and-d-statrow-value'>\n        <input\n          type='text'\n          value={props.value ? props.value : ''}\n          onChange={(e) => props.onChange(props.name, e.target.value)}\n        />\n      </div>\n      <div className='d-and-d-statrow-label'>\n        <label>{props.label}</label>\n      </div>\n    </div>\n  )\n}\n\nexport default StatRow\n","import React from 'react'\n\nfunction Skill(props: {\n  classes?: string\n  checked?: boolean\n  onChange: (arg0: string, arg1: string | boolean) => void\n  name: string\n  value: string | number | readonly string[] | undefined\n  label?: React.ReactNode\n  hint?: React.ReactNode\n}) {\n  let classes = 'd-and-d-skill'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <div className={classes}>\n      <div\n        className={\n          props.checked ? 'd-and-d-skill-circle active' : 'd-and-d-skill-circle'\n        }\n        onClick={() => props.onChange(props.name + 'Checked', !props.checked)}\n      />\n      <input\n        type='text'\n        value={props.value ? props.value : ''}\n        onChange={(e) => props.onChange(props.name, e.target.value)}\n      />\n      <label>{props.label}</label>\n      {props.hint ? (\n        <span className='d-and-d-skill-hint'>{props.hint}</span>\n      ) : null}\n    </div>\n  )\n}\n\nexport default Skill\n","import React from 'react'\n\nfunction StatBox2(props: {\n  classes?: string\n  value: string | number | readonly string[] | undefined\n  onChange: (arg0: any, arg1: string) => void\n  name: any\n  labelTop?: {} | null | undefined\n  label?: React.ReactNode\n}) {\n  let classes = 'd-and-d-statbox type2'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <div>\n      <div className={classes}>\n        <div className='d-and-d-statbox-modifier'>\n          <input\n            type='text'\n            value={props.value ? props.value : ''}\n            onChange={(e) => props.onChange(props.name, e.target.value)}\n          />\n        </div>\n        {props.labelTop != null ? (\n          <div>\n            <label className='label-top'>{props.labelTop}</label>\n          </div>\n        ) : null}\n        {props.label != null ? (\n          <div>\n            <label>{props.label}</label>\n          </div>\n        ) : null}\n      </div>\n    </div>\n  )\n}\n\nexport default StatBox2\n","import React from 'react'\n\nfunction DeathSave(props: {\n  classes?: string\n  label: React.ReactNode\n  value?: number\n  onChange: (arg0: any, arg1: number | null) => void\n  name: any\n}) {\n  let classes = 'd-and-d-deathsave'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <div className={classes}>\n      <label>{props.label}</label>\n      <div style={{ display: 'inline-block' }}>\n        <div\n          className={\n            props.value && props.value >= 1\n              ? 'd-and-d-skill-circle active'\n              : 'd-and-d-skill-circle'\n          }\n          onClick={() =>\n            props.onChange(props.name, props.value === 1 ? null : 1)\n          }\n        />\n        =\n        <div\n          className={\n            props.value && props.value >= 2\n              ? 'd-and-d-skill-circle active'\n              : 'd-and-d-skill-circle'\n          }\n          onClick={() =>\n            props.onChange(props.name, props.value === 2 ? null : 2)\n          }\n        />\n        =\n        <div\n          className={\n            props.value && props.value >= 3\n              ? 'd-and-d-skill-circle active'\n              : 'd-and-d-skill-circle'\n          }\n          onClick={() =>\n            props.onChange(props.name, props.value === 3 ? null : 3)\n          }\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default DeathSave\n","import React from 'react'\n\nfunction AttackTable(props: {\n  onChange: (arg0: any, arg1: any) => void\n  name: string\n  value?: any\n  classes?: string\n  rows: number\n}) {\n  function updateValue(index: React.Key, field: string, v: string) {\n    const value = getValue().slice()\n    value[index][field] = v\n    props.onChange(props.name, value)\n  }\n\n  function getValue() {\n    let value = props.value\n    if (!value) {\n      value = []\n    }\n    while (value.length < props.rows) {\n      value.push({})\n    }\n    return value\n  }\n\n  let classes = 'd-and-d-table'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <table className={classes}>\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th style={{ width: '70px' }}>Atk Bonus</th>\n          <th>Damage/Type</th>\n        </tr>\n      </thead>\n      <tbody>\n        {getValue().map(\n          (\n            v: {\n              name: string | number | readonly string[] | undefined\n              bonus: string | number | readonly string[] | undefined\n              damage: string | number | readonly string[] | undefined\n            },\n            index: string\n          ) => {\n            return (\n              <tr key={'d-and-d-table-row-' + props.name + index}>\n                <td>\n                  <input\n                    type='text'\n                    value={v.name ? v.name : ''}\n                    onChange={(e) => updateValue(index, 'name', e.target.value)}\n                  />\n                </td>\n                <td>\n                  <input\n                    type='text'\n                    value={v.bonus ? v.bonus : ''}\n                    onChange={(e) =>\n                      updateValue(index, 'bonus', e.target.value)\n                    }\n                  />\n                </td>\n                <td>\n                  <input\n                    type='text'\n                    value={v.damage ? v.damage : ''}\n                    onChange={(e) =>\n                      updateValue(index, 'damage', e.target.value)\n                    }\n                  />\n                </td>\n              </tr>\n            )\n          }\n        )}\n      </tbody>\n    </table>\n  )\n}\n\nexport default AttackTable\n","import React from 'react'\n\nfunction Currency(props: {\n  classes?: string\n  label: React.ReactNode\n  value: string | number | readonly string[] | undefined\n  onChange: (arg0: any, arg1: string) => void\n  name: any\n}) {\n  let classes = 'd-and-d-currency'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <div className={classes}>\n      <div className='d-and-d-currency-label'>\n        <label>{props.label}</label>\n      </div>\n      <div className='d-and-d-currency-value'>\n        <input\n          type='text'\n          value={props.value ? props.value : ''}\n          onChange={(e) => props.onChange(props.name, e.target.value)}\n        />\n      </div>\n    </div>\n  )\n}\n\nexport default Currency\n","import React from 'react'\n\n// eslint-disable-next-line no-unused-vars\nimport DnDCharacter from './DnDCharacter'\n\nimport Statbox from './Components/StatBox'\nimport StatRow from './Components/StatRow'\nimport Skill from './Components/Skill'\nimport StatBox2 from './Components/StatBox2'\nimport DeathSave from './Components/DeathSave'\nimport AttackTable from './Components/AttackTable'\nimport Currency from './Components/Currency'\n\nimport './dndstyles.css'\n\ninterface IDnDCharacterStatsSheetProps {\n  character?: DnDCharacter\n  defaultCharacter?: DnDCharacter\n  onCharacterChanged?: (\n    character: DnDCharacter,\n    changedField: string,\n    newValue: any\n  ) => void\n}\n\ninterface IDnDCharacterStatsSheetState {\n  character: DnDCharacter\n}\n\nconst initialState: IDnDCharacterStatsSheetState = {\n  character: {}\n}\n\nclass DnDCharacterStatsSheet extends React.Component<\n  IDnDCharacterStatsSheetProps,\n  IDnDCharacterStatsSheetState\n> {\n  constructor(props: IDnDCharacterStatsSheetProps) {\n    super(props)\n    if (props.defaultCharacter) {\n      initialState.character = props.defaultCharacter\n    }\n    this.state = initialState\n  }\n\n  updateCharacter(name: string, value: any) {\n    const oldCharacter = this.getCharacter()\n    const newCharacter: DnDCharacter = {}\n    Object.assign(newCharacter, oldCharacter)\n    newCharacter[name] = value\n\n    if (!this.props.character) {\n      // NOT CONTROLLED\n      this.setState({ character: newCharacter })\n    }\n\n    if (typeof this.props.onCharacterChanged === 'function') {\n      this.props.onCharacterChanged(newCharacter, name, value)\n    }\n  }\n\n  getCharacter() {\n    // NOT CONTROLLED\n    let character = this.state.character\n    if (this.props.character) {\n      // CONTROLLED\n      character = this.props.character\n    }\n    return character\n  }\n\n  render() {\n    const character = this.getCharacter()\n\n    return (\n      <div className='d-and-d-character-sheet container-xl mt-5 mb-5'>\n        <div>\n          <div className='row mb-4'>\n            <div className='col-md-3 pr-2 pl-2'>\n              <div className='d-and-d-page-title'>D&D</div>\n              <div className='d-and-d-attribute-collection char-name pr-3 pl-3'>\n                <input\n                  type='text'\n                  value={character.name ? character.name : ''}\n                  onChange={(e) => this.updateCharacter('name', e.target.value)}\n                />\n              </div>\n              <label\n                style={{\n                  width: '100%',\n                  textAlign: 'right',\n                  textTransform: 'uppercase',\n                  fontSize: '11px'\n                }}\n              >\n                Character Name\n              </label>\n            </div>\n            <div className='col-md-9 pr-2 pl-2'>\n              <div className='d-and-d-attribute-collection pr-3 pl-3'>\n                <div className='row pl-3 pr-3'>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.classLevel ? character.classLevel : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('classLevel', e.target.value)\n                      }\n                    />\n                    <label>Class & Level</label>\n                  </div>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.background ? character.background : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('background', e.target.value)\n                      }\n                    />\n                    <label>Background</label>\n                  </div>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.playerName ? character.playerName : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('playerName', e.target.value)\n                      }\n                    />\n                    <label>Player Name</label>\n                  </div>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.faction ? character.faction : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('faction', e.target.value)\n                      }\n                    />\n                    <label>Faction</label>\n                  </div>\n                </div>\n                <div className='row pl-3 pr-3'>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.race ? character.race : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('race', e.target.value)\n                      }\n                    />\n                    <label>Race</label>\n                  </div>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.alignment ? character.alignment : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('alignment', e.target.value)\n                      }\n                    />\n                    <label>Alignment</label>\n                  </div>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.xp ? character.xp : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('xp', e.target.value)\n                      }\n                    />\n                    <label>Experience Points</label>\n                  </div>\n                  <div className='col-md-3 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.dciNo ? character.dciNo : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('dciNo', e.target.value)\n                      }\n                    />\n                    <label>DCI Number</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-md-4'>\n              <div className='row'>\n                <div className='col-4 pr-1'>\n                  <div className='d-and-d-box gray'>\n                    <Statbox\n                      label='Strength'\n                      name='str'\n                      value={character.str}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Statbox\n                      label='Dexterity'\n                      name='dex'\n                      value={character.dex}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Statbox\n                      label='Constitution'\n                      name='con'\n                      value={character.con}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Statbox\n                      label='Intelligence'\n                      name='int'\n                      value={character.int}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Statbox\n                      label='Wisdom'\n                      name='wis'\n                      value={character.wis}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Statbox\n                      label='Charisma'\n                      name='cha'\n                      value={character.cha}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                  </div>\n                </div>\n                <div className='col-8'>\n                  <StatRow\n                    label='Inspiration'\n                    name='inspiration'\n                    value={character.inspiration}\n                    onChange={(name: string, value: any) => {\n                      this.updateCharacter(name, value)\n                    }}\n                  />\n                  <StatRow\n                    classes='rounded'\n                    label='Proficiency Bonus'\n                    name='proficiencyBonus'\n                    value={character.proficiencyBonus}\n                    onChange={(name: string, value: any) => {\n                      this.updateCharacter(name, value)\n                    }}\n                  />\n                  <div className='d-and-d-box'>\n                    <div style={{ textAlign: 'left' }}>\n                      <Skill\n                        label='Strength'\n                        name='strSave'\n                        value={character.strSave}\n                        checked={character.strSaveChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Dexterity'\n                        name='dexSave'\n                        value={character.dexSave}\n                        checked={character.dexSaveChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Constitution'\n                        name='conSave'\n                        value={character.conSave}\n                        checked={character.conSaveChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Intelligence'\n                        name='intSave'\n                        value={character.intSave}\n                        checked={character.intSaveChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Wisdom'\n                        name='wisSave'\n                        value={character.wisSave}\n                        checked={character.wisSaveChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Charisma'\n                        name='chaSave'\n                        value={character.chaSave}\n                        checked={character.chaSaveChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                    </div>\n                    <label\n                      className='d-and-d-title'\n                      style={{ marginTop: '10px' }}\n                    >\n                      Saving Throws\n                    </label>\n                  </div>\n                  <div className='d-and-d-box'>\n                    <div style={{ textAlign: 'left' }}>\n                      <Skill\n                        label='Acrobatics'\n                        hint='(Dex)'\n                        name='skillAcrobatics'\n                        value={character.skillAcrobatics}\n                        checked={character.skillAcrobaticsChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Animal Handling'\n                        hint='(Wis)'\n                        name='skillAnimalHandling'\n                        value={character.skillAnimalHandling}\n                        checked={character.skillAnimalHandlingChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Arcana'\n                        hint='(Int)'\n                        name='skillArcana'\n                        value={character.skillArcana}\n                        checked={character.skillArcanaChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Athletics'\n                        hint='(Str)'\n                        name='skillAthletics'\n                        value={character.skillAthletics}\n                        checked={character.skillAthleticsChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Deception'\n                        hint='(Cha)'\n                        name='skillDeception'\n                        value={character.skillDeception}\n                        checked={character.skillDeceptionChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='History'\n                        hint='(Int)'\n                        name='skillHistory'\n                        value={character.skillHistory}\n                        checked={character.skillHistoryChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Insight'\n                        hint='(Wis)'\n                        name='skillInsight'\n                        value={character.skillInsight}\n                        checked={character.skillInsightChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Intimidation'\n                        hint='(Cha)'\n                        name='skillIntimidation'\n                        value={character.skillIntimidation}\n                        checked={character.skillIntimidationChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Investigation'\n                        hint='(Int)'\n                        name='skillInvestigation'\n                        value={character.skillInvestigation}\n                        checked={character.skillInvestigationChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Medicine'\n                        hint='(Wis)'\n                        name='skillMedicine'\n                        value={character.skillMedicine}\n                        checked={character.skillMedicineChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Nature'\n                        hint='(Int)'\n                        name='skillNature'\n                        value={character.skillNature}\n                        checked={character.skillNatureChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Perception'\n                        hint='(Wis)'\n                        name='skillPerception'\n                        value={character.skillPerception}\n                        checked={character.skillPerceptionChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Performance'\n                        hint='(Cha)'\n                        name='skillPerformance'\n                        value={character.skillPerformance}\n                        checked={character.skillPerformanceChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Persuasion'\n                        hint='(Cha)'\n                        name='skillPersuasion'\n                        value={character.skillPersuasion}\n                        checked={character.skillPersuasionChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Religion'\n                        hint='(Int)'\n                        name='skillReligion'\n                        value={character.skillReligion}\n                        checked={character.skillReligionChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Sleight of Hand'\n                        hint='(Dex)'\n                        name='skillSlightOfHand'\n                        value={character.skillSlightOfHand}\n                        checked={character.skillSlightOfHandChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Stealth'\n                        hint='(Dex)'\n                        name='skillStealth'\n                        value={character.skillStealth}\n                        checked={character.skillStealthChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <Skill\n                        label='Survival'\n                        hint='(Wis)'\n                        name='skillSurvival'\n                        value={character.skillSurvival}\n                        checked={character.skillSurvivalChecked}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                    </div>\n                    <label\n                      className='d-and-d-title'\n                      style={{ marginTop: '10px' }}\n                    >\n                      Skills\n                    </label>\n                  </div>\n                </div>\n              </div>\n              <div className='mt-2'>\n                <StatRow\n                  classes='rounded rounded-sides'\n                  label='Passive Wisdom (Perception)'\n                  name='passivePerception'\n                  value={character.passivePerception}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n              </div>\n              <div className='d-and-d-box mt-4'>\n                <textarea\n                  value={\n                    character.otherProficiencies\n                      ? character.otherProficiencies\n                      : ''\n                  }\n                  onChange={(e) =>\n                    this.updateCharacter('otherProficiencies', e.target.value)\n                  }\n                  rows={12}\n                />\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Other Proficiencies & Languages\n                </label>\n              </div>\n            </div>\n\n            <div className='col-md-4'>\n              <div className='d-and-d-box gray'>\n                <div className='row'>\n                  <div className='col-4 pr-2'>\n                    <StatBox2\n                      classes='shield'\n                      labelTop='Armour'\n                      label='Class'\n                      name='ac'\n                      value={character.ac}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                  </div>\n                  <div className='col-4 pr-2 pl-2'>\n                    <StatBox2\n                      label='Initiative'\n                      name='init'\n                      value={character.init}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                  </div>\n                  <div className='col-4 pl-2'>\n                    <StatBox2\n                      label='Speed'\n                      name='speed'\n                      value={character.speed}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                  </div>\n                </div>\n\n                <div\n                  className='d-and-d-box white'\n                  style={{\n                    borderRadius: '8px 8px 0 0',\n                    marginBottom: '5px',\n                    paddingBottom: '5px'\n                  }}\n                >\n                  <div className='d-and-d-gray-text'>\n                    <label style={{ width: '95px' }}>Hit Point Maximum</label>\n                    <input\n                      type='text'\n                      style={{ width: 'calc(100% - 95px)' }}\n                      className='d-and-d-linput'\n                      value={character.maxHp ? character.maxHp : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('maxHp', e.target.value)\n                      }\n                    />\n                  </div>\n                  <input\n                    type='text'\n                    className='d-and-d-cinput'\n                    value={character.hp ? character.hp : ''}\n                    onChange={(e) => this.updateCharacter('hp', e.target.value)}\n                  />\n                  <label className='d-and-d-title' style={{ marginTop: '5px' }}>\n                    Current Hit Points\n                  </label>\n                </div>\n                <div\n                  className='d-and-d-box white mb-2'\n                  style={{ borderRadius: '0 0 8px 8px', paddingBottom: '5px' }}\n                >\n                  <input\n                    type='text'\n                    className='d-and-d-cinput'\n                    value={character.tempHp ? character.tempHp : ''}\n                    onChange={(e) =>\n                      this.updateCharacter('tempHp', e.target.value)\n                    }\n                  />\n                  <label className='d-and-d-title' style={{ marginTop: '5px' }}>\n                    Temporary Hit Points\n                  </label>\n                </div>\n\n                <div className='row mt-1'>\n                  <div className='col-6 pr-1'>\n                    <div\n                      className='d-and-d-box white mb-0'\n                      style={{ paddingBottom: '5px' }}\n                    >\n                      <div className='d-and-d-gray-text'>\n                        <label style={{ width: '25px' }}>Total</label>\n                        <input\n                          type='text'\n                          style={{ width: 'calc(100% - 25px)' }}\n                          className='d-and-d-linput'\n                          value={\n                            character.hitDiceMax ? character.hitDiceMax : ''\n                          }\n                          onChange={(e) =>\n                            this.updateCharacter('hitDiceMax', e.target.value)\n                          }\n                        />\n                      </div>\n                      <input\n                        type='text'\n                        className='d-and-d-cinput'\n                        value={character.hitDice ? character.hitDice : ''}\n                        onChange={(e) =>\n                          this.updateCharacter('hitDice', e.target.value)\n                        }\n                      />\n                      <label\n                        className='d-and-d-title'\n                        style={{ marginTop: '5px' }}\n                      >\n                        Hit Dice\n                      </label>\n                    </div>\n                  </div>\n                  <div className='col-6 pl-1'>\n                    <div\n                      className='d-and-d-box white mb-0'\n                      style={{ paddingBottom: '5px' }}\n                    >\n                      <DeathSave\n                        classes='d-and-d-save-success'\n                        label='Sucesses'\n                        name='deathsaveSuccesses'\n                        value={character.deathsaveSuccesses}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <DeathSave\n                        classes='d-and-d-save-failure'\n                        label='Failures'\n                        name='deathsaveFailures'\n                        value={character.deathsaveFailures}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                      <label\n                        className='d-and-d-title'\n                        style={{ marginTop: '6px' }}\n                      >\n                        Death Saves\n                      </label>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className='d-and-d-box mt-3'>\n                <AttackTable\n                  rows={3}\n                  name='attacks'\n                  value={character.attacks}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <textarea\n                  value={character.attacksText ? character.attacksText : ''}\n                  onChange={(e) =>\n                    this.updateCharacter('attacksText', e.target.value)\n                  }\n                  rows={6}\n                />\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Attacks & Spellcasting\n                </label>\n              </div>\n\n              <div className='d-and-d-box mt-4'>\n                <div className='row'>\n                  <div className='' style={{ width: '100px' }}>\n                    <Currency\n                      label='CP'\n                      name='cp'\n                      value={character.cp}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Currency\n                      label='SP'\n                      name='sp'\n                      value={character.sp}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Currency\n                      label='EP'\n                      name='ep'\n                      value={character.ep}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Currency\n                      label='GP'\n                      name='gp'\n                      value={character.gp}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <Currency\n                      label='PP'\n                      name='pp'\n                      value={character.pp}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                  </div>\n                  <div className='col'>\n                    <textarea\n                      className='d-and-d-equipment-indent'\n                      value={character.equipment ? character.equipment : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('equipment', e.target.value)\n                      }\n                      rows={10}\n                    />\n                  </div>\n                  <div className='col-md-12'>\n                    <textarea\n                      value={character.equipment2 ? character.equipment2 : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('equipment2', e.target.value)\n                      }\n                      rows={4}\n                    />\n                  </div>\n                </div>\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Equipment\n                </label>\n              </div>\n            </div>\n\n            <div className='col-md-4'>\n              <div\n                className='d-and-d-box gray'\n                style={{ marginBottom: '17px' }}\n              >\n                <div\n                  className='d-and-d-box white'\n                  style={{\n                    borderRadius: '8px 8px 0 0',\n                    marginBottom: '5px',\n                    paddingTop: '1px',\n                    paddingBottom: '5px'\n                  }}\n                >\n                  <textarea\n                    value={\n                      character.personalityTraits\n                        ? character.personalityTraits\n                        : ''\n                    }\n                    onChange={(e) =>\n                      this.updateCharacter('personalityTraits', e.target.value)\n                    }\n                    rows={3}\n                  />\n                  <label className='d-and-d-title'>Personality Traits</label>\n                </div>\n                <div\n                  className='d-and-d-box white'\n                  style={{\n                    borderRadius: '0 0 0 0',\n                    marginBottom: '5px',\n                    paddingTop: '1px',\n                    paddingBottom: '5px'\n                  }}\n                >\n                  <textarea\n                    value={character.ideals ? character.ideals : ''}\n                    onChange={(e) =>\n                      this.updateCharacter('ideals', e.target.value)\n                    }\n                    rows={3}\n                  />\n                  <label className='d-and-d-title'>Ideals</label>\n                </div>\n                <div\n                  className='d-and-d-box white'\n                  style={{\n                    borderRadius: '0 0 0 0',\n                    marginBottom: '5px',\n                    paddingTop: '1px',\n                    paddingBottom: '5px'\n                  }}\n                >\n                  <textarea\n                    value={character.bonds ? character.bonds : ''}\n                    onChange={(e) =>\n                      this.updateCharacter('bonds', e.target.value)\n                    }\n                    rows={2}\n                  />\n                  <label className='d-and-d-title'>Bonds</label>\n                </div>\n                <div\n                  className='d-and-d-box white'\n                  style={{\n                    borderRadius: '0 0 8px 8px',\n                    marginBottom: '0px',\n                    paddingTop: '1px',\n                    paddingBottom: '4px'\n                  }}\n                >\n                  <textarea\n                    value={character.flaws ? character.flaws : ''}\n                    onChange={(e) =>\n                      this.updateCharacter('flaws', e.target.value)\n                    }\n                    rows={2}\n                  />\n                  <label className='d-and-d-title'>Flaws</label>\n                </div>\n              </div>\n              <div className='d-and-d-box mt-3'>\n                <textarea\n                  style={{ paddingBottom: '5px' }}\n                  value={\n                    character.featuresTraits ? character.featuresTraits : ''\n                  }\n                  onChange={(e) =>\n                    this.updateCharacter('featuresTraits', e.target.value)\n                  }\n                  rows={27}\n                />\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Features & Traits\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DnDCharacterStatsSheet\n","import React from 'react'\n\nfunction Image(props: {\n  classes?: string\n  value: any\n  onChange: (arg0: any, arg1: string) => void\n  name: any\n}) {\n  function importImage(event: any) {\n    console.log(event)\n    if (event.target.files.length > 0) {\n      console.log(event.target.files)\n      if (event.target.files[0].size > 2000000) {\n        window.alert(\n          'Image is too large. Max size is 2 Mb. Please reduce the size and upload again.'\n        )\n        return\n      }\n\n      var fr = new FileReader()\n\n      fr.onload = function (e) {\n        if (\n          e.target &&\n          e.target.result &&\n          typeof e.target.result === 'string'\n        ) {\n          props.onChange(props.name, e.target.result)\n        }\n      }\n\n      fr.readAsDataURL(event.target.files[0])\n    }\n  }\n\n  let classes = 'd-and-d-image'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  const elementId = 'd-and-d-image-' + props.name\n\n  return (\n    <div\n      className={classes}\n      style={{\n        backgroundImage: props.value ? 'url(' + props.value + ')' : ''\n      }}\n      onClick={() => document.getElementById(elementId)?.click()}\n    >\n      <input\n        style={{ display: 'none' }}\n        type='file'\n        id={elementId}\n        accept='image/*'\n        onChange={(e) => importImage(e)}\n      />\n    </div>\n  )\n}\n\nexport default Image\n","/* eslint-disable prettier/prettier */\nimport React from 'react'\n\n// eslint-disable-next-line no-unused-vars\nimport DnDCharacter from './DnDCharacter'\n\nimport StatRow from './Components/StatRow'\nimport Image from './Components/Image'\n\nimport './dndstyles.css'\n\ninterface IDnDCharacterProfileSheetProps {\n  character?: DnDCharacter\n  defaultCharacter?: DnDCharacter\n  onCharacterChanged?: (\n    character: DnDCharacter,\n    changedField: string,\n    newValue: any\n  ) => void\n}\n\ninterface IDnDCharacterProfileSheetState {\n  character: DnDCharacter\n}\n\nconst initialState: IDnDCharacterProfileSheetState = {\n  character: {}\n}\n\nclass DnDCharacterProfileSheet extends React.Component<\n  IDnDCharacterProfileSheetProps,\n  IDnDCharacterProfileSheetState\n> {\n  constructor(props: IDnDCharacterProfileSheetProps) {\n    super(props)\n    if (props.defaultCharacter) {\n      initialState.character = props.defaultCharacter\n    }\n    this.state = initialState\n  }\n\n  updateCharacter(name: string, value: any) {\n    const oldCharacter = this.getCharacter()\n    const newCharacter: DnDCharacter = {}\n    Object.assign(newCharacter, oldCharacter)\n    newCharacter[name] = value\n\n    if (!this.props.character) {\n      // NOT CONTROLLED\n      this.setState({ character: newCharacter })\n    }\n\n    if (typeof this.props.onCharacterChanged === 'function') {\n      this.props.onCharacterChanged(newCharacter, name, value)\n    }\n  }\n\n  getCharacter() {\n    // NOT CONTROLLED\n    let character = this.state.character\n    if (this.props.character) {\n      // CONTROLLED\n      character = this.props.character\n    }\n    return character\n  }\n\n  render() {\n    const character = this.getCharacter()\n\n    return (\n      <div className='d-and-d-character-sheet container-xl mt-5 mb-5'>\n        <div>\n          <div className='row mb-4'>\n            <div className='col-md-3 pr-2 pl-2'>\n              <div className='d-and-d-page-title'>D&D</div>\n              <div className='d-and-d-attribute-collection char-name pr-3 pl-3'>\n                <input\n                  type='text'\n                  value={character.name ? character.name : ''}\n                  onChange={(e) => this.updateCharacter('name', e.target.value)}\n                />\n              </div>\n              <label\n                style={{\n                  width: '100%',\n                  textAlign: 'right',\n                  textTransform: 'uppercase',\n                  fontSize: '11px'\n                }}\n              >\n                Character Name\n              </label>\n            </div>\n            <div className='col-md-9 pr-2 pl-2'>\n              <div className='d-and-d-attribute-collection pr-3 pl-3'>\n                <div className='row pl-3 pr-3'>\n                  <div className='col-md-4 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.age ? character.age : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('age', e.target.value)\n                      }\n                    />\n                    <label>Age</label>\n                  </div>\n                  <div className='col-md-4 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.height ? character.height : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('height', e.target.value)\n                      }\n                    />\n                    <label>Height</label>\n                  </div>\n                  <div className='col-md-4 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.weight ? character.weight : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('weight', e.target.value)\n                      }\n                    />\n                    <label>Weight</label>\n                  </div>\n                </div>\n                <div className='row pl-3 pr-3'>\n                  <div className='col-md-4 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.eyes ? character.eyes : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('eyes', e.target.value)\n                      }\n                    />\n                    <label>Eyes</label>\n                  </div>\n                  <div className='col-md-4 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.skin ? character.skin : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('skin', e.target.value)\n                      }\n                    />\n                    <label>Skin</label>\n                  </div>\n                  <div className='col-md-4 col-6 pl-0 pr-0'>\n                    <input\n                      type='text'\n                      value={character.hair ? character.hair : ''}\n                      onChange={(e) =>\n                        this.updateCharacter('hair', e.target.value)\n                      }\n                    />\n                    <label>Hair</label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-md-4'>\n              <div className='d-and-d-box square'>\n                <Image \n                  name='appearance'\n                  value={character.appearance}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Character Appearance\n                </label>\n              </div>\n\n              <div className='d-and-d-box mt-3'>\n                <textarea\n                  style={{ paddingBottom: '5px' }}\n                  value={\n                    character.backstory ? character.backstory : ''\n                  }\n                  onChange={(e) =>\n                    this.updateCharacter('backstory', e.target.value)\n                  }\n                  rows={26}\n                />\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Character Backstory\n                </label>\n              </div>\n            </div>\n\n            <div className='col-md-8'>\n              <div className='d-and-d-box'>\n                <div className='row'>\n                  <div className='col-md-6 border-right'>\n                    <div className='d-and-d-gray-text' style={{ paddingBottom: '1px' }}>\n                      <label style={{ width: '70px' }}>Faction Rank</label>\n                      <input\n                        type='text'\n                        style={{ width: 'calc(100% - 70px)' }}\n                        className='d-and-d-linput'\n                        value={character.factionRank ? character.factionRank : ''}\n                        onChange={(e) =>\n                          this.updateCharacter('factionRank', e.target.value)\n                        }\n                      />\n                    </div>\n\n                    <textarea\n                      style={{ paddingBottom: '5px' }}\n                      value={\n                        character.allies ? character.allies : ''\n                      }\n                      onChange={(e) =>\n                        this.updateCharacter('allies', e.target.value)\n                      }\n                      rows={16}\n                    />\n                  </div>\n                  <div className='col-md-6'>\n                    <div className='d-and-d-box gray noborder' style={{marginBottom: '13px'}}>\n                      <div className='d-and-d-faction-input'>\n                        <label>Faction</label>\n                        <input\n                          type='text'\n                          value={character.faction ? character.faction : ''}\n                          onChange={(e) =>\n                            this.updateCharacter('faction', e.target.value)\n                          }\n                        />\n                      </div>\n                      <Image \n                        classes='faction'\n                        name='factionImg'\n                        value={character.factionImg}\n                        onChange={(name: string, value: any) => {\n                          this.updateCharacter(name, value)\n                        }}\n                      />\n                    </div>\n\n                    <textarea\n                      style={{ paddingBottom: '5px' }}\n                      value={\n                        character.allies2 ? character.allies2 : ''\n                      }\n                      onChange={(e) =>\n                        this.updateCharacter('allies2', e.target.value)\n                      }\n                      rows={3}\n                    />\n                  </div>\n                </div>\n                \n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Allies & Organisations\n                </label>\n              </div>\n              \n              <div className='d-and-d-box mt-3'>\n                <div className='row'>\n                  <div className='col-md-6 border-right'>\n                    <textarea\n                      style={{ paddingBottom: '5px' }}\n                      value={\n                        character.additionalFeatures ? character.additionalFeatures : ''\n                      }\n                      onChange={(e) =>\n                        this.updateCharacter('additionalFeatures', e.target.value)\n                      }\n                      rows={13}\n                    />\n                  </div>\n                  <div className='col-md-6'>\n                    <textarea\n                      style={{ paddingBottom: '5px' }}\n                      value={\n                        character.additionalFeatures2 ? character.additionalFeatures2 : ''\n                      }\n                      onChange={(e) =>\n                        this.updateCharacter('additionalFeatures2', e.target.value)\n                      }\n                      rows={13}\n                    />\n                  </div>\n                </div>\n\n                <label className='d-and-d-title' style={{ marginTop: '10px' }}>\n                  Additional Features & Traits\n                </label>\n              </div>\n\n              <div className='d-and-d-box mt-3'>\n                <div className='row'>\n                  <div className='col-md-6 border-right'>\n                    <StatRow\n                      classes='m-2 rounded rounded-sides wide-input'\n                      label='Total Non-Consumable Magic Items'\n                      name='totalNonConsumableMagicItems'\n                      value={character.totalNonConsumableMagicItems}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n\n                    <textarea\n                      style={{ paddingBottom: '5px', marginTop: '2px' }}\n                      value={\n                        character.treasure ? character.treasure : ''\n                      }\n                      onChange={(e) =>\n                        this.updateCharacter('treasure', e.target.value)\n                      }\n                      rows={8}\n                    />\n                  </div>\n                  <div className='col-md-6'>\n                    <textarea\n                      style={{ paddingBottom: '5px', marginTop: '4px' }}\n                      value={\n                        character.treasure2 ? character.treasure2 : ''\n                      }\n                      onChange={(e) =>\n                        this.updateCharacter('treasure2', e.target.value)\n                      }\n                      rows={10}\n                    />\n                  </div>\n                </div>\n                \n                <label className='d-and-d-title' style={{ marginTop: '4px' }}>\n                  Treasure\n                </label>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DnDCharacterProfileSheet\n","/* eslint-disable prettier/prettier */\nimport React from 'react'\n\nfunction SpellTable(props: {\n  onChange: (arg0: any, arg1: any) => void\n  name: string\n  slotsName?: string\n  slotsUsedName?: string\n  level: number\n  value?: any\n  slotsValue?: string\n  slotsUsedValue?: number\n  classes?: string\n  rows: number\n  showLabels?: boolean\n  style?: React.CSSProperties | undefined\n}) {\n  function updateValue(index: React.Key, field: string, v: string | boolean) {\n    const value = getValue().slice()\n    value[index][field] = v\n    props.onChange(props.name, value)\n  }\n\n  function getValue() {\n    let value = props.value\n    if (!value) {\n      value = []\n    }\n    while (value.length < props.rows) {\n      value.push({})\n    }\n    return value\n  }\n\n  function renderSlotsRemaining() {\n    let slotCount = 6\n    if (props.slotsValue != null && props.slotsValue !== '' && Number(props.slotsValue) != null) {\n      slotCount = Number(props.slotsValue)\n    }\n\n    const slots = []\n    for (let i1 = 1; i1 <= slotCount; i1++) {\n      slots.push(\n        <div\n          key={'d-and-d-table-slot-' + props.name + i1}\n          className={\n            props.slotsUsedValue && props.slotsUsedValue >= i1\n              ? 'd-and-d-skill-circle active'\n              : 'd-and-d-skill-circle'\n          }\n          onClick={() =>\n            props.onChange(\n              props.slotsUsedName,\n              props.slotsUsedValue === i1 ? null : i1\n            )\n          }\n        />\n      )\n    }\n\n    return slots\n  }\n\n  let classes = 'd-and-d-spelllist'\n  if (props.classes) {\n    classes += ' ' + props.classes\n  }\n\n  return (\n    <div className={classes} style={props.style}>\n      {props.showLabels ? (\n        <div className='d-and-d-spell-header-labels'>\n          <label style={{ width: '20px' }}>Spell Level</label>\n          <label style={{ width: '80px' }}>Slots Total</label>\n          <label style={{ width: 'calc(100% - 100px)' }}>Slots Remaining</label>\n        </div>\n      ) : null}\n      <div className='d-and-d-spell-header'>\n        <div className='d-and-d-spell-level'>{props.level}</div>\n        {props.level === 0 ? (\n          <div className='d-and-d-spell-slots'>\n            <label>Cantrips</label>\n          </div>\n        ) : (\n          <div className='d-and-d-spell-slots'>\n            <div className='d-and-d-spell-slots-total'>\n              <input\n                type='text'\n                value={props.slotsValue ? props.slotsValue : ''}\n                onChange={(e) =>\n                  props.onChange(props.slotsName, e.target.value)\n                }\n              />\n            </div>\n            <div className='d-and-d-spell-slots-remaining'>\n              {renderSlotsRemaining()}\n            </div>\n          </div>\n        )}\n      </div>\n\n      <table>\n        {props.showLabels ? (\n          <thead>\n            <tr>\n              <th style={{ width: '30px', position: 'absolute', left: '-7px' }}>\n                Prepared\n              </th>\n              <th>Spell Name</th>\n            </tr>\n          </thead>\n        ) : null}\n        <tbody>\n          {getValue().map(\n            (\n              v: {\n                name: string | number | readonly string[] | undefined\n                prepared: boolean | undefined\n              },\n              index: string\n            ) => {\n              return (\n                <tr key={'d-and-d-table-row-' + props.name + index}>\n                  {props.level > 0 ? (\n                    <td className='d-and-d-spell-prepared'>\n                      <div\n                        className={\n                          v.prepared\n                            ? 'd-and-d-skill-circle active'\n                            : 'd-and-d-skill-circle'\n                        }\n                        onClick={() =>\n                          updateValue(index, 'prepared', !v.prepared)\n                        }\n                      />\n                    </td>\n                  ) : null}\n                  <td>\n                    <input\n                      type='text'\n                      value={v.name ? v.name : ''}\n                      onChange={(e) =>\n                        updateValue(index, 'name', e.target.value)\n                      }\n                    />\n                  </td>\n                </tr>\n              )\n            }\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default SpellTable\n","import React from 'react'\n\n// eslint-disable-next-line no-unused-vars\nimport DnDCharacter from './DnDCharacter'\n\nimport StatBox2 from './Components/StatBox2'\n\nimport './dndstyles.css'\nimport SpellTable from './Components/SpellTable'\n\ninterface IDnDCharacterSpellsSheetProps {\n  character?: DnDCharacter\n  defaultCharacter?: DnDCharacter\n  onCharacterChanged?: (\n    character: DnDCharacter,\n    changedField: string,\n    newValue: any\n  ) => void\n}\n\ninterface IDnDCharacterSpellsSheetState {\n  character: DnDCharacter\n}\n\nconst initialState: IDnDCharacterSpellsSheetState = {\n  character: {}\n}\n\nclass DnDCharacterSpellsSheet extends React.Component<\n  IDnDCharacterSpellsSheetProps,\n  IDnDCharacterSpellsSheetState\n> {\n  constructor(props: IDnDCharacterSpellsSheetProps) {\n    super(props)\n    if (props.defaultCharacter) {\n      initialState.character = props.defaultCharacter\n    }\n    this.state = initialState\n  }\n\n  updateCharacter(name: string, value: any) {\n    const oldCharacter = this.getCharacter()\n    const newCharacter: DnDCharacter = {}\n    Object.assign(newCharacter, oldCharacter)\n    newCharacter[name] = value\n\n    if (!this.props.character) {\n      // NOT CONTROLLED\n      this.setState({ character: newCharacter })\n    }\n\n    if (typeof this.props.onCharacterChanged === 'function') {\n      this.props.onCharacterChanged(newCharacter, name, value)\n    }\n  }\n\n  getCharacter() {\n    // NOT CONTROLLED\n    let character = this.state.character\n    if (this.props.character) {\n      // CONTROLLED\n      character = this.props.character\n    }\n    return character\n  }\n\n  render() {\n    const character = this.getCharacter()\n\n    return (\n      <div className='d-and-d-character-sheet container-xl mt-5 mb-5'>\n        <div>\n          <div className='row mb-4'>\n            <div className='col-md-3 pr-2 pl-2'>\n              <div className='d-and-d-page-title'>D&D</div>\n              <div className='d-and-d-attribute-collection char-name pr-3 pl-3'>\n                <input\n                  type='text'\n                  value={\n                    character.spellcastingClass\n                      ? character.spellcastingClass\n                      : ''\n                  }\n                  onChange={(e) =>\n                    this.updateCharacter('spellcastingClass', e.target.value)\n                  }\n                />\n              </div>\n              <label\n                style={{\n                  width: '100%',\n                  textAlign: 'right',\n                  textTransform: 'uppercase',\n                  fontSize: '11px'\n                }}\n              >\n                Spellcasting Class/Ability\n              </label>\n            </div>\n            <div className='col-md-9 pr-2 pl-2' style={{ marginTop: '18px' }}>\n              <div className='d-and-d-attribute-collection gray pr-3 pl-3'>\n                <div className='row pl-3 pr-3'>\n                  <div className='col-4 pr-4 pl-4'>\n                    <StatBox2\n                      name='preparedSpellsTotal'\n                      value={character.preparedSpellsTotal}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <label\n                      style={{\n                        textTransform: 'none',\n                        width: '100%',\n                        textAlign: 'center',\n                        marginBottom: '0'\n                      }}\n                    >\n                      Prepared Spells\n                    </label>\n                    <label\n                      style={{\n                        textTransform: 'none',\n                        width: '100%',\n                        textAlign: 'center',\n                        marginBottom: '0'\n                      }}\n                    >\n                      Total\n                    </label>\n                  </div>\n                  <div className='col-4 pr-4 pl-4'>\n                    <StatBox2\n                      name='spellSaveDC'\n                      value={character.spellSaveDC}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <label\n                      style={{\n                        textTransform: 'none',\n                        width: '100%',\n                        textAlign: 'center',\n                        marginBottom: '0'\n                      }}\n                    >\n                      Spell Save DC\n                    </label>\n                  </div>\n                  <div className='col-4 pr-4 pl-4'>\n                    <StatBox2\n                      name='spellAttackBonus'\n                      value={character.spellAttackBonus}\n                      onChange={(name: string, value: any) => {\n                        this.updateCharacter(name, value)\n                      }}\n                    />\n                    <label\n                      style={{\n                        textTransform: 'none',\n                        width: '100%',\n                        textAlign: 'center',\n                        marginBottom: '0'\n                      }}\n                    >\n                      Spell Attack\n                    </label>\n                    <label\n                      style={{\n                        textTransform: 'none',\n                        width: '100%',\n                        textAlign: 'center',\n                        marginBottom: '0'\n                      }}\n                    >\n                      Bonus\n                    </label>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div className='row'>\n            <div className='col-md-4'>\n              <div className='d-and-d-box'>\n                <SpellTable\n                  level={0}\n                  rows={9}\n                  name='cantrips'\n                  value={character.cantrips}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                  style={{ marginBottom: '23px' }}\n                />\n                <SpellTable\n                  level={1}\n                  rows={12}\n                  showLabels\n                  name='lvl1Spells'\n                  slotsName='lvl1SpellSlotsTotal'\n                  slotsUsedName='lvl1SpellSlotsUsed'\n                  value={character.lvl1Spells}\n                  slotsValue={character.lvl1SpellSlotsTotal}\n                  slotsUsedValue={character.lvl1SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <SpellTable\n                  level={2}\n                  rows={13}\n                  name='lvl2Spells'\n                  slotsName='lvl2SpellSlotsTotal'\n                  slotsUsedName='lvl2SpellSlotsUsed'\n                  value={character.lvl2Spells}\n                  slotsValue={character.lvl2SpellSlotsTotal}\n                  slotsUsedValue={character.lvl2SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n              </div>\n            </div>\n\n            <div className='col-md-4'>\n              <div className='d-and-d-box'>\n                <SpellTable\n                  level={3}\n                  rows={13}\n                  name='lvl3Spells'\n                  slotsName='lvl3SpellSlotsTotal'\n                  slotsUsedName='lvl3SpellSlotsUsed'\n                  value={character.lvl3Spells}\n                  slotsValue={character.lvl3SpellSlotsTotal}\n                  slotsUsedValue={character.lvl3SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <SpellTable\n                  level={4}\n                  rows={13}\n                  name='lvl4Spells'\n                  slotsName='lvl4SpellSlotsTotal'\n                  slotsUsedName='lvl4SpellSlotsUsed'\n                  value={character.lvl4Spells}\n                  slotsValue={character.lvl4SpellSlotsTotal}\n                  slotsUsedValue={character.lvl4SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <SpellTable\n                  level={5}\n                  rows={9}\n                  name='lvl5Spells'\n                  slotsName='lvl5SpellSlotsTotal'\n                  slotsUsedName='lvl5SpellSlotsUsed'\n                  value={character.lvl5Spells}\n                  slotsValue={character.lvl5SpellSlotsTotal}\n                  slotsUsedValue={character.lvl5SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n              </div>\n            </div>\n\n            <div className='col-md-4'>\n              <div className='d-and-d-box'>\n                <SpellTable\n                  level={6}\n                  rows={9}\n                  name='lvl6Spells'\n                  slotsName='lvl6SpellSlotsTotal'\n                  slotsUsedName='lvl6SpellSlotsUsed'\n                  value={character.lvl6Spells}\n                  slotsValue={character.lvl6SpellSlotsTotal}\n                  slotsUsedValue={character.lvl6SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <SpellTable\n                  level={7}\n                  rows={9}\n                  name='lvl7Spells'\n                  slotsName='lvl7SpellSlotsTotal'\n                  slotsUsedName='lvl7SpellSlotsUsed'\n                  value={character.lvl7Spells}\n                  slotsValue={character.lvl7SpellSlotsTotal}\n                  slotsUsedValue={character.lvl7SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <SpellTable\n                  level={8}\n                  rows={7}\n                  name='lvl8Spells'\n                  slotsName='lvl8SpellSlotsTotal'\n                  slotsUsedName='lvl8SpellSlotsUsed'\n                  value={character.lvl8Spells}\n                  slotsValue={character.lvl8SpellSlotsTotal}\n                  slotsUsedValue={character.lvl8SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n                <SpellTable\n                  level={9}\n                  rows={7}\n                  name='lvl9Spells'\n                  slotsName='lvl9SpellSlotsTotal'\n                  slotsUsedName='lvl9SpellSlotsUsed'\n                  value={character.lvl9Spells}\n                  slotsValue={character.lvl9SpellSlotsTotal}\n                  slotsUsedValue={character.lvl9SpellSlotsUsed}\n                  onChange={(name: string, value: any) => {\n                    this.updateCharacter(name, value)\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DnDCharacterSpellsSheet\n","import React, { useState, useEffect } from 'react'\nimport {\n  Switch,\n  Route,\n  Link,\n  withRouter,\n  Redirect,\n  useLocation\n} from 'react-router-dom'\nimport axios from 'axios'\nimport qs from 'qs'\n\nimport { DnDCharacterStatsSheet, DnDCharacterProfileSheet, DnDCharacterSpellSheet, DnDCharacter } from 'dnd-character-sheets'\nimport 'dnd-character-sheets/dist/index.css'\n\nfunction ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}\n\nconst App = (props: any) => {\n  const [character, setCharacter] = useState<DnDCharacter>(loadDefaultCharacter())\n  const [navTop, setNavTop] = useState<number>(0)\n  const [prevScrollpos, setPrevScrollpos] = useState<number>(window.pageYOffset)\n  const [, setLoading] = useState<boolean>(false)\n\n  const { search } = useLocation();\n  useEffect(() => {\n    const characterToLoad = qs.parse(search, { ignoreQueryPrefix: true }).character\n    if (characterToLoad) {\n      setLoading(true)\n      axios\n        .get('characters/' + characterToLoad + '.json')\n        .then((response: any) => {\n          setLoading(false)\n          try {\n            if (!Array.isArray(response.data) && typeof response.data === 'object') {\n              console.log('Loaded Character - ' + characterToLoad)\n              updateCharacter(response.data)\n            } else {\n              throw new Error('Json file does not contain a DnD character.')\n            }\n          }\n          catch {\n            throw new Error('Json file does not contain a DnD character.')\n          }\n        })\n        .catch((error: any) => {\n          console.log('Failed to load Character - ' + characterToLoad)\n          console.log(error)\n          setLoading(false)\n        })\n    }\n  }, [search]);\n\n  const statsSheet = (\n    <DnDCharacterStatsSheet\n      character={character}\n      onCharacterChanged={updateCharacter}\n    />\n  )\n  const profileSheet = (\n    <DnDCharacterProfileSheet\n      character={character}\n      onCharacterChanged={updateCharacter}\n    />\n  )\n  const spellSheet = (\n    <DnDCharacterSpellSheet\n      character={character}\n      onCharacterChanged={updateCharacter}\n    />\n  )\n\n  window.onscroll = function() {onScroll()};\n  function onScroll() {\n    var currentScrollPos = window.pageYOffset;\n    if (prevScrollpos > currentScrollPos || currentScrollPos < 20) {\n      setNavTop(0)\n    } else {\n      setNavTop(-280);\n    }\n    setPrevScrollpos(currentScrollPos)\n  }\n\n  function loadDefaultCharacter () {\n    let character: DnDCharacter = {}\n    const lsData = localStorage.getItem('dnd-character-data')\n    if (lsData) {\n      try {\n        character = JSON.parse(lsData)\n      } catch {}\n    }\n    return character\n  }\n\n  function updateCharacter (character: DnDCharacter) {\n    setCharacter(character)\n    localStorage.setItem('dnd-character-data', JSON.stringify(character))\n  }\n\n  function exportCharacter () {\n    const json = JSON.stringify(character, null, 2)\n\n    var a = document.createElement('a');\n    var file = new Blob([json], {type: 'application/json'});\n    a.href = URL.createObjectURL(file);\n    a.download = character.name ? character.name.replace(/[^a-z0-9]/gi, '_').toLowerCase() + '.json' : 'dnd-character.json';\n    a.click();\n  }\n\n\n  function importCharacter (event: any) {\n    if (event.target.files.length > 0){\n      var fr = new FileReader();\n\n      fr.onload = function(e) { \n        if (e.target && e.target.result && typeof e.target.result === 'string') {\n          loadCharacter(e.target.result)\n        }\n      }\n    \n      fr.readAsText(event.target.files[0]);\n    }\n  }\n\n  function loadCharacter(json: string) {\n    try {\n      var result = JSON.parse(typeof json === 'string' ? json : '{}');\n      if (!Array.isArray(result) && typeof result === 'object') {\n        updateCharacter(result)\n      } else {\n        window.alert('Json file does not contain a DnD character.')\n      }\n    }\n    catch {\n      window.alert('Json file does not contain a DnD character.')\n    }\n  }\n\n  function clearCharacter() {\n    updateCharacter({ })\n  }\n\n  function getDefaultRedirect(search: string | undefined) {\n    let defaultRedirect = '/stats' + search\n    if (window.innerWidth < 992) { \n      // is mobile device\n      defaultRedirect = '/all' + search\n    }\n    return defaultRedirect\n  }\n\n  return (\n    <div>\n      <nav className='navbar navbar-expand-lg navbar-dark fixed-top' style={{ backgroundColor: 'rgb(204, 10, 33)', top: navTop === 0 ? '' : navTop + 'px' }}>\n          <button className='navbar-toggler' type='button' data-toggle='collapse' data-target='#navbarSupportedContent' aria-controls='navbarSupportedContent' aria-expanded='false' aria-label='Toggle navigation'>\n              <span className='navbar-toggler-icon'></span>\n          </button>\n          <div style={{width:'100%'}}>\n            <div className='collapse navbar-collapse' id='navbarSupportedContent'>\n                <ul className='navbar-nav ml-lg-5' data-toggle='collapse' data-target='.navbar-collapse.show'>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/stats' ? 'nav-link active' : 'nav-link'} to='/stats'>Stats</Link>\n                    </li>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/profile' ? 'nav-link active' : 'nav-link'} to='/profile'>Profile</Link>\n                    </li>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/spells' ? 'nav-link active' : 'nav-link'} to='/spells'>Spells</Link>\n                    </li>\n                    <li className='nav-item mr-lg-3'>\n                        <Link className={props.location.pathname === '/all' ? 'nav-link active' : 'nav-link'} to='/all'>All</Link>\n                    </li>\n                </ul>\n\n                <ul className='navbar-nav ml-auto mr-lg-5' data-toggle='collapse' data-target='.navbar-collapse.show'>\n                    <li className='nav-item mr-lg-3'>\n                        <button className='btn btn-dark' onClick={() => exportCharacter()}>Export</button>\n                        <input style={{display: 'none'}} type=\"file\" id=\"selectFiles\" accept=\"application/json\" onChange={(e) => importCharacter(e)} />\n                        <button className='btn btn-dark' onClick={() => document.getElementById(\"selectFiles\")?.click()}>Import</button>\n                        <button className='btn btn-dark' onClick={() => window.print()}>Print</button>\n                        <button className='btn btn-danger' onClick={() => clearCharacter()}>Clear</button>\n                    </li>\n                </ul>\n            </div>\n          </div>\n      </nav>\n      <div className='app-holder'>\n\n        <Switch>\n          <Route exact path='/'>\n            <ScrollToTop />\n            <Redirect to={getDefaultRedirect(search)} />\n          </Route>\n          <Route exact path='/stats'>\n            <ScrollToTop />\n            {statsSheet}\n          </Route>\n          <Route exact path='/profile'>\n            <ScrollToTop />\n            {profileSheet}\n          </Route>\n          <Route exact path='/spells'>\n            <ScrollToTop />\n            {spellSheet}\n          </Route>\n          <Route exact path='/all'>\n            <ScrollToTop />\n            {statsSheet}\n            <div className='page-break' />\n            <div className='page-space' />\n            {profileSheet}\n            <div className='page-break' />\n            <div className='page-space' />\n            {spellSheet}\n          </Route>\n        </Switch>\n        \n\n      </div>\n      <footer className=\"no-print page-footer font-small text-white pt-4\" style={{ backgroundColor: 'rgb(211, 49, 21)' }}>\n        <div className=\"container-fluid container-xl text-center text-md-left mt-2 mb-3\">\n            <div className=\"row\">\n              <div className=\"col-md-6 mt-md-0 mt-3\">\n                <h5>DnD Character Sheets</h5>\n                <p>This page was created using dnd-character-sheets, an open source ReactJs library created by Daryl Buckle.</p>\n              </div>\n              <hr className=\"clearfix w-100 d-md-none pb-3\" />\n              <div className=\"col-md-3 mb-md-0 mb-3\">\n                <h5>Links</h5>\n                <ul className=\"list-unstyled\">\n                  <li>\n                    <a href=\"https://github.com/darylbuckle/dnd-character-sheets\">Source Code</a>\n                  </li>\n                  <li>\n                    <a href=\"https://www.npmjs.com/package/dnd-character-sheets\">Npm</a>\n                  </li>\n                  <li>\n                    <a href=\"https://github.com/darylbuckle\">Daryl Buckle</a>\n                  </li>\n                </ul>\n              </div>\n              <div className=\"col-md-3 mb-md-0 mb-3\">\n                <h5>Related</h5>\n                <ul className=\"list-unstyled\">\n                  <li>\n                    <a href=\"https://darylbuckle.github.io/espergen-character-sheets\">Esper Genesis Character Sheets</a>\n                  </li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        <div className=\"footer-copyright text-center mt-5 py-2 text-white small\" style={{ backgroundColor: 'rgb(204, 10, 33)' }}>\n          MIT © Daryl Buckle 2020\n        </div>\n      </footer>\n    </div>\n    \n  )\n}\n\nexport default withRouter(App)\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport { BrowserRouter as Router} from 'react-router-dom';\n\nReactDOM.render(<Router basename={'dnd-character-sheets'}><App /></Router>, document.getElementById('root'))"],"sourceRoot":""}